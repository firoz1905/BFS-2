Approach 1 : DFS
Time Complexity: O(N)
Space Complexity :O(N)

# Definition for Employee.
class Employee:
    def __init__(self, id: int, importance: int, subordinates: List[int]):
        self.id = id
        self.importance = importance
        self.subordinates = subordinates
"""

class Solution(object):
    def getImportance(self, employees, id):
        """
        :type employees: List[Employee]
        :type id: int
        :rtype: int
        """
        
        def dfs(hashmap, id):
            ans = 0
            if id in hashmap:
                emp = hashmap[id]
                ans += emp.importance
                for sub in emp.subordinates:
                    ans += dfs(hashmap, sub)
            return ans
        
        hashmap = dict()
        for employee in employees:
            hashmap[employee.id] = employee
        ans = 0
        ans = dfs(hashmap, id)            
        return ans
        
  Approach 2: BFS
  Time Complexity :O(N)
  Space Complexity : O(N)
  class Solution:
    def getImportance(self, employees: List['Employee'], id: int) -> int:
        if len(employees)==0 and employees is None: return 0
        emp={e.id: e for e in employees}
        q=deque()### Queue
        q.append(emp[id])
        result=0
        while q:
            employee=q.popleft()
            result+=employee.importance
            for subs in employee.subordinates:
                q.append(emp[subs])
        return result
  
